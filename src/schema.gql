# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type NgoInfoHollow {
  country: String!
  city: String!
  ngoId: ID!
  name: String!
  email: String!
  phone: String
}

type NgoInfo {
  country: String!
  city: String!
  ngoId: ID!
  name: String!
  email: String!
  phone: String
  shelteredPets: [Pet!]!
}

type PetHollow {
  petId: ID!
  associatedNgoId: ID!
  type: PetType!
  breed: String!
  name: String!
  age: Int!
  gender: Gender!
  photoUrl: String!
}

enum PetType {
  DOG
  CAT
  COW
  PARROT
}

enum Gender {
  MALE
  FEMALE
}

type Pet {
  petId: ID!
  associatedNgoId: ID!
  type: PetType!
  breed: String!
  name: String!
  age: Int!
  gender: Gender!
  photoUrl: String!
  associatedNgo: NgoInfo!
  donationsReceived: [Donation!]!
}

type UserHollow {
  country: String!
  city: String!
  userId: ID!
  name: String!
  email: String!
  phone: String
  photoUrl: String!
}

type User {
  country: String!
  city: String!
  userId: ID!
  name: String!
  email: String!
  phone: String
  photoUrl: String!
  donationsMade: [Donation!]!
}

type DonationHollow {
  petId: ID!
  userId: ID!
  donationDate: DateTime!
  duration: TimePeriod!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

enum TimePeriod {
  MONTH_1
  MONTH_2
  MONTH_6
  YEAR_1
}

type Donation {
  petId: ID!
  userId: ID!
  donationDate: DateTime!
  duration: TimePeriod!
  donatedToPet: Pet!
  donatedByUser: User!
}

input NgoInfoInput {
  country: String!
  city: String!
  name: String!
  email: String!
  phone: String
}

input PetInput {
  associatedNgoId: String!
  type: PetType!
  breed: String!
  name: String!
  age: Int!
  gender: Gender!
  photoUrl: String!
}

input UserInput {
  country: String!
  city: String!
  name: String!
  email: String!
  phone: String
  photoUrl: String!
}

input DonationInput {
  petId: String!
  userId: String!
  duration: TimePeriod!
}

type Query {
  allDonations: [Donation!]!
  donation(petId: String!, userId: String!): Donation
  allNGOs: [NgoInfo!]!
  NGO(ngoId: ID!): NgoInfo
  allPets: [Pet!]!
  filterPets(petType: PetType!): [Pet!]!
  pet(petId: ID!): Pet
  allUsers: [User!]!
  user(userId: ID, email: String): User
}

type Mutation {
  addDonation(donation: DonationInput!): DonationHollow!
  addPet(pet: PetInput!): PetHollow!
  addUser(user: UserInput!): UserHollow!
}
